{"version":3,"file":"static/js/323.b646ad83.chunk.js","mappings":"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","sources":["pages/farm-mtpl/hooks/useApproveFarm.js","pages/farm-mtpl/components/InputField.js","pages/farm-mtpl/hooks/useStakeFarms.js","pages/farm-mtpl/hooks/useUnstakeFarms.js","pages/farm-mtpl/components/StakeAction.js","pages/farm-mtpl/hooks/useHarvestFarm.js","pages/farm-mtpl/components/HarvestAction.js","pages/farm-mtpl/components/farmActions.js","utils/calls/farms.js","state/index.js","utils/getGasPrice.js"],"sourcesContent":["import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from '../../../hooks/useContract'\r\nimport { useCallWithGasPrice } from '../../../hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract) => {\r\n    const masterChefContract = useMasterchef()\r\n    const { callWithGasPrice } = useCallWithGasPrice()\r\n    const handleApprove = useCallback(async () => {\r\n        try {\r\n            const tx = await callWithGasPrice(lpContract, 'approve', [\r\n                masterChefContract.address,\r\n                ethers.constants.MaxUint256,\r\n            ])\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        } catch (e) {\r\n            return false\r\n        }\r\n    }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n    return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import PropTypes from 'prop-types';\r\nimport {useMemo, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Card, CardActions,\r\n    CardContent,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\n\r\nimport {ethers} from \"ethers\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport {escapeRegExp} from \"../../../utils\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport {getBalanceAmount, getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nInputField.propTypes = {\r\n    tokenSymbol: PropTypes.string.isRequired,\r\n    isMax: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    placeHolder: PropTypes.string,\r\n    inputValue: PropTypes.number,\r\n    onInputChange: PropTypes.func,\r\n    onMax: PropTypes.func,\r\n    selectedToken: PropTypes.any,\r\n    tokenBalance: PropTypes.any,\r\n    max: PropTypes.any,\r\n    onConfirm: PropTypes.any,\r\n    onDismiss: PropTypes.any\r\n}\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\r\n\r\nexport default function InputField(\r\n    {\r\n        tokenSymbol = \"\",\r\n        isMax=false,\r\n        label=\"\",\r\n        placeHolder=\"\",\r\n        inputValue=\"\",\r\n        onInputChange=null,\r\n        onMax=null,\r\n        selectedToken,\r\n        tokenBalance,\r\n        max,\r\n        onConfirm,\r\n        onDismiss\r\n    }\r\n) {\r\n    const { account } = useActiveWeb3React()\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(max), [max])\r\n\r\n    const valNumber = new BigNumber(inputValue)\r\n    const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n    const enforcer = (nextUserInput) => {\r\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n            onInputChange(nextUserInput)\r\n        }\r\n    }\r\n\r\n    const isBalanceZero = max === '0' || !max\r\n\r\n    const displayBalance = (balance) => {\r\n        try{\r\n            const stakedBalanceBigNumber = getBalanceAmount(balance)\r\n            if (isBalanceZero) {\r\n                return '0'\r\n            }\r\n            if (stakedBalanceBigNumber.gt(0)) {\r\n                return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n            }\r\n            return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card sx={{maxWidth: 620}}>\r\n                <CardContent sx={{background: '#e7e9ec', margin: '5px', borderRadius:'inherit'}}>\r\n                    <div>\r\n                        <p>\r\n                            {selectedToken\r\n                                ? `Balance: ${displayBalance(tokenBalance) ?? 'Loading' } `\r\n                                : ' - '}\r\n                            {\r\n                                (account && isMax && selectedToken) &&\r\n                                <Button variant=\"outlined\" style={{marginLeft:'3px'}} onClick={onMax} size=\"small\">Max</Button>\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div style={{marginTop: '5px'}}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={8} md={8}>\r\n                                <TextField\r\n                                    inputMode=\"decimal\"\r\n                                    step=\"any\"\r\n                                    min=\"0\"\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    value={parseFloat(inputValue)}\r\n                                    variant=\"filled\"\r\n                                    label={label}\r\n                                    placeholder={placeHolder}\r\n                                    title={label}\r\n                                    onChange={(event) => {\r\n                                        enforcer(event.currentTarget.value.replace(/,/g, '.'))\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} md={4} style={{fontSize:'10px', display: 'flex', alignItems:'center'}}>\r\n                                <Button onClick={onMax} variant=\"outlined\" style={{marginRight: '5px'}}>\r\n                                    Max\r\n                                </Button>\r\n                                {tokenSymbol}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={\r\n                        async () => {\r\n                            setPendingTx(true)\r\n                            try{\r\n                                await onConfirm(inputValue)\r\n                                onDismiss()\r\n                            }catch(e){\r\n                                showError(e.data ? e.data.message : e.message)\r\n                            }finally {\r\n                                setPendingTx(false)\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}>\r\n                        Confirm\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </>\r\n    )\r\n}","import { useCallback } from 'react'\r\nimport { stakeFarm } from '../../../utils/calls'\r\nimport { useMasterchef } from '../../../hooks/useContract'\r\n\r\nconst useStakeFarms = (pid) => {\r\n    const masterChefContract = useMasterchef()\r\n\r\n    const handleStake = useCallback(\r\n        async (amount) => {\r\n            const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n            console.info(txHash)\r\n        },\r\n        [masterChefContract, pid],\r\n    )\r\n\r\n    return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from '../../../utils/calls'\r\nimport { useMasterchef } from '../../../hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid) => {\r\n    const masterChefContract = useMasterchef()\r\n\r\n    const handleUnstake = useCallback(\r\n        async (amount) => {\r\n            await unstakeFarm(masterChefContract, pid, amount)\r\n        },\r\n        [masterChefContract, pid],\r\n    )\r\n\r\n    return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport {useMemo, useState} from \"react\";\r\nimport {ChainId} from \"@udegoswap/sdk\";\r\nimport {ethers} from \"ethers\";\r\nimport InputField from \"./InputField\";\r\nimport useStakeFarms from \"../hooks/useStakeFarms\";\r\nimport useUnstakeFarms from \"../hooks/useUnstakeFarms\";\r\nimport {useLpTokenPrice} from \"../../../state/farms/hooks\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {useAppDispatch} from \"../../../redux/store\";\r\nimport {fetchFarmUserDataAsync} from \"../../../state/farms\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport {getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nconst StakeAction = ({\r\n    farm,\r\n    tokenBalance,\r\n    tokenName,\r\n    pid,\r\n    lpLabel,\r\n    isUnstake,\r\n    isDisabled=false\r\n}) => {\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [input, setInput] = useState(false)\r\n    const { onStake } = useStakeFarms(pid)\r\n    const { onUnstake } = useUnstakeFarms(pid)\r\n    const { account } = useActiveWeb3React()\r\n    const dispatch = useAppDispatch()\r\n    const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(tokenBalance), [tokenBalance])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const openDialog = () => {\r\n        setInput(\"\")\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleInput = (val) => {\r\n        setInput(val)\r\n    }\r\n\r\n    const handleMax = () => {\r\n        setInput(fullBalance)\r\n    }\r\n\r\n    const handleStake = async (amount) => {\r\n        try {\r\n            await onStake(amount)\r\n            dispatch(fetchFarmUserDataAsync({account, pids: [pid]}))\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const handleUnstake = async (amount) => {\r\n        try{\r\n            await onUnstake(amount)\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const onDismiss = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className=\"px-4 py-3 text-center text-sm text-white bg-sky-600 rounded-lg font-medium hover:bg-blue-600 transition-all w-full md:w-auto xs:w-auto disabled:bg-opacity-40\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isDisabled}\r\n                onClick={openDialog}\r\n            >\r\n                {\r\n                    isUnstake ?\r\n                        \"Unstake\"\r\n                        : \"Stake\"\r\n                }\r\n            </button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>\r\n                    {\r\n                        isUnstake ?\r\n                            \"Unstake\"\r\n                            : \"Stake\"\r\n                    } {lpLabel}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <InputField\r\n                        tokenSymbol={farm.lpSymbol}\r\n                        selectedToken={farm.lpAddresses[ChainId.MAINNET]}\r\n                        tokenBalance={tokenBalance}\r\n                        onInputChange={handleInput}\r\n                        inputValue={input}\r\n                        max={tokenBalance}\r\n                        onMax={handleMax}\r\n                        onConfirm={isUnstake ? handleUnstake : handleStake}\r\n                        onDismiss={onDismiss}\r\n                    />\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nStakeAction.propTypes = {\r\n    farm: PropTypes.any,\r\n    tokenBalance: PropTypes.any,\r\n    stakedBalance: PropTypes.any,\r\n    tokenName: PropTypes.any,\r\n    pid: PropTypes.any,\r\n    lpLabel: PropTypes.any,\r\n    isUnstake: PropTypes.bool,\r\n    isDisabled: PropTypes.bool\r\n}\r\n\r\nexport default StakeAction\r\n\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from '../../../utils/calls'\r\nimport { useMasterchef } from '../../../hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid) => {\r\n    const masterChefContract = useMasterchef()\r\n\r\n    const handleHarvest = useCallback(async () => {\r\n        await harvestFarm(masterChefContract, farmPid)\r\n    }, [farmPid, masterChefContract])\r\n\r\n    return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\n// import BigNumber from \"bignumber.js\";\r\n// import { usePriceUdeBusd} from \"../../../state/farms/hooks\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {useAppDispatch} from \"../../../redux/store\";\r\nimport useHarvestFarm from \"../hooks/useHarvestFarm\";\r\nimport {getBalanceAmount} from \"../../../utils/formatBalance\";\r\nimport {BIG_ZERO} from \"../../../utils/bigNumber\";\r\nimport {fetchFarmUserDataAsync} from \"../../../state/farms\";\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\n\r\nconst HarvestAction = ({\r\n    earnings,\r\n    pid,\r\n    timeStamp=0\r\n }) => {\r\n    const { account } = useActiveWeb3React()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n    const { onReward } = useHarvestFarm(pid)\r\n    const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n\r\n    return (\r\n        <>\r\n            <button className=\"px-4 py-3 text-center text-sm text-white bg-sky-600 rounded-lg font-medium hover:bg-blue-600 transition-all w-full md:w-auto xs:w-auto disabled:bg-opacity-40\"\r\n                disabled={(parseFloat(timeStamp) > 0) || (rawEarningsBalance.eq(0) || pendingTx)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={async () => {\r\n                    setPendingTx(true)\r\n                    try{\r\n                        await onReward()\r\n                        showFulfill(\"Successfully Harvested UDE\")\r\n                    }catch (e) {\r\n                        showError(e.data ? e.data.message : e.message)\r\n                    }\r\n                    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n                }}\r\n            >\r\n                Harvest\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nHarvestAction.propTypes = {\r\n    earnings: PropTypes.any,\r\n    pid: PropTypes.any,\r\n    timeStamp: PropTypes.number\r\n}\r\n\r\nexport default HarvestAction\r\n\r\n","import PropTypes from 'prop-types'\r\nimport {Button, Divider, Grid, Typography} from \"@material-ui/core\";\r\nimport React, {useCallback, useEffect, useState} from \"react\";\r\nimport {getAddress} from \"../../../utils/addressHelpers\";\r\nimport {useAppDispatch} from \"../../../redux/store\";\r\nimport {useERC20} from \"../../../hooks/useContract\";\r\nimport useApproveFarm from \"../hooks/useApproveFarm\";\r\nimport {fetchFarmUserDataAsync} from \"../../../state/farms\";\r\nimport StakeAction from \"./StakeAction\";\r\nimport HarvestAction from \"./HarvestAction\";\r\nimport {formatUnit} from \"../../../config/index\";\r\nimport ConnectWallet from \"../../../components/mtpl/ConnectWallet\";\r\n\r\nfunction InfoItem(number, label=\"\") {\r\n    return (\r\n        <Grid item xs={4}>\r\n            <div variant=\"caption\" style={{ mb: 0.5, color: 'text.white', display: 'block', fontSize: '12px' }}>\r\n                {label}\r\n            </div>\r\n            <span variant=\"subtitle1\" className='text-xs'>{number}</span>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction formatTime(timeStmp) {\r\n    var days = Math.floor(timeStmp / (1000 * 60 * 60 * 24));\r\n    var hours = Math.floor((timeStmp % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    var minutes = Math.floor((timeStmp % (1000 * 60 * 60)) / (1000 * 60));\r\n    // var seconds = Math.floor((timeStmp % (1000 * 60)) / 1000);\r\n\r\n    let formt = days + \"d \" + hours + \"h \" + minutes + \"m\";\r\n    return formt;\r\n}\r\n\r\nconst FarmActions = ({\r\n    farm,\r\n    account,\r\n    lpLabel,\r\n    addLiquidityUrl,\r\n    udePrice\r\n    }) => {\r\n\r\n    const [requestedApproval, setRequestedApproval] = useState(false)\r\n    const { pid, lpAddresses } = farm\r\n    const { allowance, tokenBalance, stakedBalance, earnings, userLast } = farm.userData || {}\r\n    const lpAddress = getAddress(lpAddresses)\r\n    const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const lpContract = useERC20(lpAddress)\r\n\r\n    const { onApprove } = useApproveFarm(lpContract)\r\n\r\n    const handleApprove = useCallback(async () => {\r\n        try {\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n            setRequestedApproval(true)\r\n            await onApprove()\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n            setRequestedApproval(false)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }, [onApprove, dispatch, account, pid])\r\n\r\n    const withdraw = 604800\r\n    const investWithdraw = (parseFloat(userLast) + parseFloat(withdraw)) *  1000\r\n    const nowStamp = Date.now()\r\n\r\n    const differ = investWithdraw - nowStamp;\r\n    const timeSt = ((differ/1000) > 0 ? (differ/1000) : 0)\r\n    const hours = formatTime(timeSt * 1000)\r\n\r\n    const renderApprovalOrStakeButton = () => isApproved ? (\r\n            <StakeAction\r\n                farm={farm}\r\n                tokenBalance={tokenBalance}\r\n                tokenName={farm.lpSymbol}\r\n                pid={pid}\r\n                lpLabel={lpLabel}\r\n            />\r\n        ) : (\r\n            <button\r\n                className=\"px-4 py-3 text-center text-sm text-white bg-blue-700 rounded-lg w-full font-medium hover:bg-sky-600 transition-all\"\r\n                variant=\"contained\" disabled={requestedApproval} onClick={handleApprove}>\r\n                Approve\r\n            </button>\r\n        )\r\n\r\n    useEffect(\r\n        () => dispatch(fetchFarmUserDataAsync({ account, pids: [pid] })),\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {/* <Grid container sx={{ py: 3, textAlign: 'center' }} spacing={3}>\r\n                <Grid item xs={4} md={4}>\r\n                    <HarvestAction pid={pid} earnings={earnings} timeStamp={hours} />\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    {!account ? <ConnectWallet mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    <StakeAction\r\n                        farm={farm}\r\n                        pid={pid}\r\n                        tokenBalance={stakedBalance}\r\n                        lpLabel={lpLabel}\r\n                        tokenName={farm.lpSymbol}\r\n                        isUnstake\r\n                        isDisabled={!isApproved || parseFloat(stakedBalance) <= 0}\r\n                    />\r\n                </Grid>\r\n            </Grid> */}\r\n\r\n            <div className='flex items-center sm:flex-row flex-col justify-between gap-4 pb-5 mb-2 border-b border-white border-opacity-10'>\r\n                <div className='sm:col-span-1 w-full md:w-auto xs:w-auto'>\r\n                    <HarvestAction pid={pid} earnings={earnings} />\r\n                </div>\r\n                <div className='sm:col-span-1 w-full md:w-auto xs:w-auto'>\r\n                    {!account ? <ConnectWallet mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n                </div>\r\n                <div className='sm:col-span-1 w-full md:w-auto xs:w-auto'>\r\n                    <StakeAction\r\n                        farm={farm}\r\n                        pid={pid}\r\n                        tokenBalance={stakedBalance}\r\n                        lpLabel={lpLabel}\r\n                        tokenName={farm.lpSymbol}\r\n                        isUnstake\r\n                        isDisabled={!isApproved || parseFloat(stakedBalance) <= 0}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            \r\n\r\n            <Grid container sx={{ pt: 2, textAlign: 'center' }}>\r\n                {InfoItem(formatUnit(stakedBalance.toNumber()), \"STAKED\")}\r\n                {InfoItem(formatUnit(earnings.toNumber(), 6), \"REWARDS\")}\r\n                {InfoItem(`${hours}`, \"LOCKED\")}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nFarmActions.propTypes = {\r\n    farm: PropTypes.any\r\n}\r\n\r\nexport default FarmActions","import BigNumber from 'bignumber.js'\r\nimport getGasPrice from '../getGasPrice'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from '../../config/index'\r\nimport {showError, showPromise} from \"../../config/helpers\";\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount, isCompound) => {\r\n    const gasPrice = getGasPrice()\r\n    const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFormat().replaceAll(\",\", \"\")\r\n    try{\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.enterStaking(value)\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.deposit(pid, value)\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        console.log(e)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\r\n    // const gasPrice = getGasPrice()\r\n    const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFormat().replaceAll(\",\", \"\")\r\n    try {\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.leaveStaking(value)\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.withdraw(pid, value)\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n    const gasPrice = getGasPrice()\r\n    try {\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.enterStaking('0')\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.deposit(pid, '0')\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        return null\r\n    }\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport { useDispatch } from 'react-redux';\r\nimport farmsReducer from './farms';\r\nimport poolsReducer from './pools';\r\nimport blockReducer from './block';\r\nimport { updateVersion } from './global/actions';\r\nimport user from './user/reducer';\r\nimport transactions from './transactions/reducer';\r\nimport swap from './swap/reducer';\r\nimport lists from './lists/reducer';\r\nimport burn from './burn/reducer';\r\nimport multicall from './multicall/reducer';\r\n\r\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists', 'profile'];\r\nconst store = configureStore({\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    reducer: {\r\n        block: blockReducer,\r\n        farms: farmsReducer,\r\n        pools: poolsReducer,\r\n        // Exchange\r\n        user,\r\n        transactions,\r\n        swap,\r\n        burn,\r\n        multicall,\r\n        lists,\r\n    },\r\n    middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\r\n    preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\nstore.dispatch(updateVersion());\r\n// export const useAppDispatch = () => useDispatch();\r\nexport default store;","import { ChainId } from '@udegoswap/sdk'\r\nimport store from '../state'\r\nimport { GAS_PRICE_GWEI } from '../state/user/hooks/helpers'\r\n\r\n/**\r\n * Function to return gasPrice outwith a react component\r\n */\r\nconst getGasPrice = () => {\r\n    const chainId = process.env.REACT_APP_CHAIN_ID\r\n    const state = store.getState()\r\n    const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\r\n    return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\r\n}\r\n\r\nexport default getGasPrice\r\n"],"names":["lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","address","ethers","tx","wait","receipt","status","inputRegex","RegExp","InputField","tokenSymbol","isMax","label","placeHolder","inputValue","onInputChange","onMax","selectedToken","tokenBalance","max","onConfirm","onDismiss","account","useActiveWeb3React","useState","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","isBalanceZero","Card","sx","maxWidth","CardContent","background","margin","borderRadius","balance","stakedBalanceBigNumber","getBalanceAmount","gt","toFixed","e","showError","data","message","displayBalance","Button","variant","style","marginLeft","onClick","size","marginTop","Grid","container","spacing","item","xs","md","TextField","inputMode","step","min","type","fullWidth","value","parseFloat","placeholder","title","onChange","event","nextUserInput","currentTarget","replace","test","escapeRegExp","fontSize","display","alignItems","marginRight","CardActions","disabled","isFinite","eq","pid","handleStake","amount","stakeFarm","txHash","console","info","onStake","handleUnstake","unstakeFarm","onUnstake","farm","tokenName","lpLabel","isUnstake","isDisabled","open","setOpen","input","setInput","useStakeFarms","useUnstakeFarms","dispatch","useAppDispatch","useLpTokenPrice","fetchFarmUserDataAsync","pids","className","color","Dialog","onClose","DialogTitle","DialogContent","dividers","lpSymbol","lpAddresses","ChainId","val","farmPid","onReward","harvestFarm","earnings","timeStamp","useHarvestFarm","rawEarningsBalance","BIG_ZERO","showFulfill","InfoItem","number","mb","timeStmp","addLiquidityUrl","udePrice","requestedApproval","setRequestedApproval","userData","allowance","stakedBalance","userLast","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","useApproveFarm","handleApprove","error","differ","Date","now","hours","Math","floor","useEffect","ConnectWallet","mt","width","pt","textAlign","formatUnit","toNumber","isCompound","getGasPrice","times","DEFAULT_TOKEN_DECIMAL","toFormat","replaceAll","enterStaking","showPromise","deposit","log","leaveStaking","withdraw","PERSISTED_KEYS","store","configureStore","devTools","process","reducer","block","blockReducer","farms","farmsReducer","pools","poolsReducer","user","transactions","swap","burn","multicall","lists","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","updateVersion","userGas","gasPrice","GAS_PRICE_GWEI"],"sourceRoot":""}