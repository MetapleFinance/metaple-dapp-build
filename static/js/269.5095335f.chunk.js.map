{"version":3,"file":"static/js/269.5095335f.chunk.js","mappings":"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","sources":["components/mtpl/ConnectWallet.js","hooks/useCallWithGasPrice.js","state/pools/hooks.js","../node_modules/@material-ui/core/Divider/dividerClasses.js","../node_modules/@material-ui/core/Divider/Divider.js","utils/compoundApyHelpers.js","pages/stake-mtpl/components/InputField.js","pages/stake-mtpl/hooks/useStakePool.js","pages/stake-mtpl/hooks/useUnstakePool.js","pages/stake-mtpl/components/StakeAction.js","pages/stake-mtpl/hooks/useHarvestPool.js","pages/stake-mtpl/components/HarvestAction.js","pages/stake-mtpl/components/CompoundAction.js","pages/stake-mtpl/StakeActions.js","pages/pool-mtpl/hooks/useApprove.js","pages/stake-mtpl/StakeCard.js","pages/stake-mtpl/helpers.js","pages/MTPLPools.js","pages/MTPLProfile.js","state/user/hooks/index.js","utils/formatNumber.js"],"sourcesContent":["import React from \"react\";\r\nimport {ConnectorNames} from \"../../utils/web3React\";\r\nimport useConnect from \"../../hooks/useConnect\";\r\n\r\nconst ConnectWallet = () => {\r\n    const { login } = useConnect()\r\n    const [showModal, setShowModal] = React.useState(false);\r\n    \r\n    return (\r\n        <>\r\n            <button className=\"px-5 py-3 text-sm text-center text-white bg-gradient-to-r from-pink-500 to-pink-600 rounded-lg font-medium hover:from-sky-700 hover:to-blue-700 transition-all duration-700\" onClick={() => setShowModal(true)} disable><span>Connect Wallet</span></button>\r\n                {\r\n                    showModal ? \r\n                    <>\r\n                    <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\r\n                    <div className=\"relative w-auto my-6 mx-auto max-w-md\">\r\n                        {/*content*/}\r\n                        <div className=\"border-0 rounded-3xl shadow-lg relative flex flex-col w-full bg-white dark:bg-black outline-none focus:outline-none\">\r\n                        {/*header*/}\r\n                        <div className=\"flex items-start justify-between p-5 border-b border-solid border-blueGray-200 dark:border-gray-600 dark:border-opacity-30 rounded-t\">\r\n                            <h3 className=\"text-lg font-semibold dark:text-white\">Connect Wallet</h3>\r\n                            <button className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-40 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\" onClick={() => setShowModal(false)}>\r\n                            <span className=\"bg-transparent text-black dark:text-white hover:text-indigo-600 h-6 w-6 text-2xl block outline-none focus:outline-none\">×</span>\r\n                            </button>\r\n                        </div>\r\n                        {/*body*/}\r\n                        <div className=\"relative p-6 flex-auto\">\r\n                            <p className=\"my-0 text-blueGray-500 text-lg leading-relaxed\">\r\n                            <div className=\"grid grid-cols-2\">\r\n                                <div className=\"col-span-1\">\r\n                                <div onClick={() => {\r\n                                    // // console.log(ConnectorNames.Injected)\r\n                                    login(ConnectorNames.Injected)\r\n                                }} style={{cursor: 'pointer'}} className=\"w-full flex items-center justify-center flex-col\">\r\n                                    <img src=\"images/meta.webp\" alt=\"\" className=\"w-10 h-10 mx-auto mb-4\" />\r\n                                    <div className=\"text-black dark:text-white text-xs font-semibold\">Metamask</div>\r\n                                </div>\r\n                                </div>\r\n                                <div className=\"col-span-1\">\r\n                                <div\r\n                                    onClick={() => {\r\n                                        // // console.log(ConnectorNames.WalletConnect)\r\n                                        login(ConnectorNames.WalletConnect)\r\n                                    }}\r\n                                    className=\"w-full flex items-center justify-center flex-col\">\r\n                                    {/* <img src=\"images/meta.webp\" alt=\"\" className=\"w-10 h-10 mx-auto mb-4\" /> */}\r\n                                    <svg viewBox=\"0 0 40 40\" width=\"40px\" color=\"text\" xmlns=\"http://www.w3.org/2000/svg\" class=\"w-10 h-10 mx-auto mb-4\"><path d=\"M8.68096 12.4756C14.9323 6.39698 25.0677 6.39698 31.3191 12.4756L32.0714 13.2071C32.384 13.511 32.384 14.0038 32.0714 14.3077L29.4978 16.8103C29.3415 16.9622 29.0881 16.9622 28.9318 16.8103L27.8965 15.8036C23.5354 11.563 16.4647 11.563 12.1036 15.8036L10.9948 16.8817C10.8385 17.0336 10.5851 17.0336 10.4288 16.8817L7.85517 14.3791C7.54261 14.0752 7.54261 13.5824 7.85517 13.2785L8.68096 12.4756ZM36.6417 17.6511L38.9322 19.8783C39.2448 20.1823 39.2448 20.675 38.9322 20.979L28.6039 31.022C28.2913 31.3259 27.7846 31.3259 27.472 31.022C27.472 31.022 27.472 31.022 27.472 31.022L20.1416 23.8942C20.0634 23.8182 19.9367 23.8182 19.8586 23.8942C19.8586 23.8942 19.8586 23.8942 19.8586 23.8942L12.5283 31.022C12.2157 31.3259 11.709 31.3259 11.3964 31.022C11.3964 31.022 11.3964 31.022 11.3964 31.022L1.06775 20.9788C0.755186 20.6749 0.755186 20.1821 1.06775 19.8782L3.35833 17.6509C3.6709 17.347 4.17767 17.347 4.49024 17.6509L11.8208 24.7789C11.8989 24.8549 12.0256 24.8549 12.1038 24.7789C12.1038 24.7789 12.1038 24.7789 12.1038 24.7789L19.4339 17.6509C19.7465 17.347 20.2533 17.347 20.5658 17.6509C20.5658 17.6509 20.5658 17.6509 20.5658 17.6509L27.8964 24.7789C27.9745 24.8549 28.1012 24.8549 28.1794 24.7789L35.5098 17.6511C35.8223 17.3471 36.3291 17.3471 36.6417 17.6511Z\" fill=\"#0369a1\"></path></svg>\r\n                                    <div className=\"text-black dark:text-white text-xs font-semibold\">WalletConnect</div>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            </p>\r\n                        </div>\r\n                        {/*footer*/}\r\n                        <div className=\"flex items-center flex-col justify-end px-6 py-4 border-t border-solid border-blueGray-200 dark:border-gray-600 dark:border-opacity-30 rounded-b\">\r\n                            <div className=\"text-sm text-sky-600 font-semibold mb-4\">Haven’t got a crypto wallet yet?</div>\r\n                            <button\r\n                            className=\"bg-sky-500 hover:bg-pink-600 text-white active:bg-sky-600 font-bold uppercase text-xs w-full px-6 py-3 rounded-xl shadow hover:shadow-lg outline-none focus:outline-none ease-linear transition-all duration-150\" type=\"button\" onClick={() => setShowModal(false)}>Close</button>\r\n                            {/* <button className=\"bg-emerald-500 text-white active:bg-emerald-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\" type=\"button\" onClick={() => setShowModal(false)}>Save Changes</button> */}\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"opacity-75 fixed inset-0 z-40 bg-black backdrop-blur-xl\"></div>\r\n                </>\r\n                : null }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ConnectWallet;","import { useCallback } from 'react';\r\nimport { get } from 'lodash';\r\nimport { useGasPrice } from '../state/user/hooks';\r\n/**\r\n * Perform a contract call with a gas price returned from useGasPrice\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport function useCallWithGasPrice() {\r\n    const gasPrice = useGasPrice();\r\n    const callWithGasPrice = useCallback(async (contract, methodName, methodArgs = [], overrides = null) => {\r\n        const contractMethod = get(contract, methodName);\r\n        const hasManualGasPriceOverride = overrides === null || overrides === undefined ? undefined : overrides.gasPrice;\r\n        const tx = await contractMethod(...methodArgs, hasManualGasPriceOverride ? ({ ...overrides}) : ({...overrides, gasPrice}));\r\n        return tx;\r\n    }, [gasPrice]);\r\n    return { callWithGasPrice };\r\n}","import { useEffect, useMemo } from 'react';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { useAppDispatch } from '../../redux/store';\r\nimport { simpleRpcProvider } from '../../utils/providers';\r\nimport useRefresh from '../../hooks/useRefresh';\r\nimport {fetchPoolsPublicDataAsync, fetchPoolsStakingLimitsAsync, fetchPoolsUserDataAsync} from '.';\r\nimport { transformPool } from './helpers';\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { slowRefresh } = useRefresh();\r\n    useEffect(() => {\r\n        const fetchPoolsPublicData = async () => {\r\n            const blockNumber = await simpleRpcProvider.getBlockNumber();\r\n            dispatch(fetchPoolsPublicDataAsync(blockNumber));\r\n        };\r\n        fetchPoolsPublicData();\r\n        dispatch(fetchPoolsStakingLimitsAsync())\r\n    }, [dispatch, slowRefresh]);\r\n};\r\nexport const useFetchUserPools = (account) => {\r\n    const { fastRefresh } = useRefresh();\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n        if (account) {\r\n            dispatch(fetchPoolsUserDataAsync(account));\r\n        }\r\n    }, [account, dispatch, fastRefresh]);\r\n};\r\nexport const usePools = () => {\r\n    const { pools, userDataLoaded } = useSelector((state) => ({\r\n        pools: state.pools.data,\r\n        userDataLoaded: state.pools.userDataLoaded,\r\n    }));\r\n    return { pools: pools.map(transformPool), userDataLoaded };\r\n};\r\n\r\nexport const useCakeVault = () => {\r\n    const { totalShares: totalSharesAsString, pricePerFullShare: pricePerFullShareAsString, totalCakeInVault: totalCakeInVaultAsString, estimatedCakeBountyReward: estimatedCakeBountyRewardAsString, totalPendingCakeHarvest: totalPendingCakeHarvestAsString, fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod }, userData: { isLoading, userShares: userSharesAsString, cakeAtLastUserAction: cakeAtLastUserActionAsString, lastDepositedTime, lastUserActionTime, }, } = useSelector((state) => state.pools.cakeVault);\r\n    const estimatedCakeBountyReward = useMemo(() => new BigNumber(estimatedCakeBountyRewardAsString), [estimatedCakeBountyRewardAsString]);\r\n    const totalPendingCakeHarvest = useMemo(() => new BigNumber(totalPendingCakeHarvestAsString), [totalPendingCakeHarvestAsString]);\r\n    const totalShares = useMemo(() => new BigNumber(totalSharesAsString), [totalSharesAsString]);\r\n    const pricePerFullShare = useMemo(() => new BigNumber(pricePerFullShareAsString), [pricePerFullShareAsString]);\r\n    const totalCakeInVault = useMemo(() => new BigNumber(totalCakeInVaultAsString), [totalCakeInVaultAsString]);\r\n    const userShares = useMemo(() => new BigNumber(userSharesAsString), [userSharesAsString]);\r\n    const cakeAtLastUserAction = useMemo(() => new BigNumber(cakeAtLastUserActionAsString), [cakeAtLastUserActionAsString]);\r\n    return {\r\n        totalShares,\r\n        pricePerFullShare,\r\n        totalCakeInVault,\r\n        estimatedCakeBountyReward,\r\n        totalPendingCakeHarvest,\r\n        fees: {\r\n            performanceFee,\r\n            callFee,\r\n            withdrawalFee,\r\n            withdrawalFeePeriod,\r\n        },\r\n        userData: {\r\n            isLoading,\r\n            userShares,\r\n            cakeAtLastUserAction,\r\n            lastDepositedTime,\r\n            lastUserActionTime,\r\n        },\r\n    };\r\n};\r\n","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getDividerUtilityClass(slot) {\n  return generateUtilityClass('MuiDivider', slot);\n}\nconst dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);\nexport default dividerClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"absolute\", \"children\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"textAlign\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '@material-ui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDividerUtilityClass } from './dividerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    absolute,\n    children,\n    classes,\n    flexItem,\n    light,\n    orientation,\n    textAlign,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],\n    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']\n  };\n  return composeClasses(slots, getDividerUtilityClass, classes);\n};\n\nconst DividerRoot = styled('div', {\n  name: 'MuiDivider',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0,\n  // Reset browser default style.\n  flexShrink: 0,\n  borderWidth: 0,\n  borderStyle: 'solid',\n  borderColor: theme.palette.divider,\n  borderBottomWidth: 'thin'\n}, ownerState.absolute && {\n  position: 'absolute',\n  bottom: 0,\n  left: 0,\n  width: '100%'\n}, ownerState.light && {\n  borderColor: alpha(theme.palette.divider, 0.08)\n}, ownerState.variant === 'inset' && {\n  marginLeft: 72\n}, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {\n  marginLeft: theme.spacing(2),\n  marginRight: theme.spacing(2)\n}, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {\n  marginTop: theme.spacing(1),\n  marginBottom: theme.spacing(1)\n}, ownerState.orientation === 'vertical' && {\n  height: '100%',\n  borderBottomWidth: 0,\n  borderRightWidth: 'thin'\n}, ownerState.flexItem && {\n  alignSelf: 'stretch',\n  height: 'auto'\n}), ({\n  theme,\n  ownerState\n}) => _extends({}, ownerState.children && {\n  display: 'flex',\n  whiteSpace: 'nowrap',\n  textAlign: 'center',\n  border: 0,\n  '&::before, &::after': {\n    position: 'relative',\n    width: '100%',\n    borderTop: `thin solid ${theme.palette.divider}`,\n    top: '50%',\n    content: '\"\"',\n    transform: 'translateY(50%)'\n  }\n}), ({\n  theme,\n  ownerState\n}) => _extends({}, ownerState.children && ownerState.orientation === 'vertical' && {\n  flexDirection: 'column',\n  '&::before, &::after': {\n    height: '100%',\n    top: '0%',\n    left: '50%',\n    borderTop: 0,\n    borderLeft: `thin solid ${theme.palette.divider}`,\n    transform: 'translateX(0%)'\n  }\n}), ({\n  ownerState\n}) => _extends({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {\n  '&::before': {\n    width: '90%'\n  },\n  '&::after': {\n    width: '10%'\n  }\n}, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {\n  '&::before': {\n    width: '10%'\n  },\n  '&::after': {\n    width: '90%'\n  }\n}));\nconst DividerWrapper = styled('span', {\n  name: 'MuiDivider',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-block',\n  paddingLeft: theme.spacing(1.2),\n  paddingRight: theme.spacing(1.2)\n}, ownerState.orientation === 'vertical' && {\n  paddingTop: theme.spacing(1.2),\n  paddingBottom: theme.spacing(1.2)\n}));\nconst Divider = /*#__PURE__*/React.forwardRef(function Divider(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDivider'\n  });\n\n  const {\n    absolute = false,\n    children,\n    className,\n    component = children ? 'div' : 'hr',\n    flexItem = false,\n    light = false,\n    orientation = 'horizontal',\n    role = component !== 'hr' ? 'separator' : undefined,\n    textAlign = 'center',\n    variant = 'fullWidth'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    absolute,\n    component,\n    flexItem,\n    light,\n    orientation,\n    role,\n    textAlign,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DividerRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    role: role,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: children ? /*#__PURE__*/_jsx(DividerWrapper, {\n      className: classes.wrapper,\n      ownerState: ownerState,\n      children: children\n    }) : null\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Absolutely position the element.\n   * @default false\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   * @default false\n   */\n  flexItem: PropTypes.bool,\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   * @default false\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * @ignore\n   */\n  role: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The text alignment.\n   * @default 'center'\n   */\n  textAlign: PropTypes.oneOf(['center', 'left', 'right']),\n\n  /**\n   * The variant to use.\n   * @default 'fullWidth'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['fullWidth', 'inset', 'middle']), PropTypes.string])\n} : void 0;\nexport default Divider;","const DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825];\r\n/**\r\n *\r\n * @param principalInUSD - amount user wants to invest in USD\r\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\r\n * @param earningTokenPrice - price of reward token\r\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\r\n * @param performanceFee - performance fee as percentage\r\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\r\n */\r\nexport const getInterestBreakdown = ({ principalInUSD, apr, earningTokenPrice, compoundFrequency = 1, performanceFee = 0, }) => {\r\n    // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n    const timesCompounded = 365 * compoundFrequency;\r\n    // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n    const aprAsDecimal = apr / 100;\r\n    // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n    // and also cause rounding errors\r\n    const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\r\n    const roundingDecimalsNew = isHighValueToken ? 5 : 3;\r\n    return DAYS_TO_CALCULATE_AGAINST.map((days) => {\r\n        const daysAsDecimalOfYear = days / 365;\r\n        // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\r\n        const principal = principalInUSD / earningTokenPrice;\r\n        let interestEarned = principal * aprAsDecimal * (days / 365);\r\n        if (timesCompounded !== 0) {\r\n            // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n            const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear);\r\n            // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\r\n            interestEarned = accruedAmount - principal;\r\n            if (performanceFee) {\r\n                const performanceFeeAsDecimal = performanceFee / 100;\r\n                const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal;\r\n                interestEarned -= performanceFeeAsAmount;\r\n            }\r\n        }\r\n        return parseFloat(interestEarned.toFixed(roundingDecimalsNew));\r\n    });\r\n};\r\n/**\r\n * @param interest how much USD amount you aim to make\r\n * @param apr APR of farm/pool\r\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\r\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\r\n */\r\nexport const getPrincipalForInterest = (interest, apr, compoundingFrequency, performanceFee = 0) => DAYS_TO_CALCULATE_AGAINST.map((days) => {\r\n        const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee);\r\n        // // console.log('inside', interest, apyAsDecimal)\r\n        // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\r\n        return parseFloat((interest / apyAsDecimal).toFixed(2));\r\n    });\r\n/**\r\n * Given APR returns APY\r\n * @param apr APR as percentage\r\n * @param compoundFrequency how many compounds per day\r\n * @param days if other than 365 adjusts (A)PY for period less than a year\r\n * @param performanceFee performance fee as percentage\r\n * @returns APY as decimal\r\n */\r\nexport const getApy = (apr, compoundFrequency = 1, days = 365, performanceFee = 0) => {\r\n    const daysAsDecimalOfYear = days / 365;\r\n    const aprAsDecimal = apr / 100;\r\n    const timesCompounded = 365 * compoundFrequency;\r\n    let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear;\r\n    if (timesCompounded > 0) {\r\n        apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1;\r\n    }\r\n    if (performanceFee) {\r\n        const performanceFeeAsDecimal = performanceFee / 100;\r\n        const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal;\r\n        apyAsDecimal -= takenAsPerformanceFee;\r\n    }\r\n    return apyAsDecimal;\r\n};\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n    if (amountInvested === 0) {\r\n        return 0;\r\n    }\r\n    const percentage = (amountEarned / amountInvested) * 100;\r\n    return percentage;\r\n};","import PropTypes from 'prop-types';\r\nimport {useMemo, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Card, CardActions,\r\n    CardContent,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\n\r\nimport {ethers} from \"ethers\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport {escapeRegExp} from \"../../../utils\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport {getBalanceAmount, getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nInputField.propTypes = {\r\n    tokenSymbol: PropTypes.string.isRequired,\r\n    isMax: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    placeHolder: PropTypes.string,\r\n    inputValue: PropTypes.number,\r\n    onInputChange: PropTypes.func,\r\n    onMax: PropTypes.func,\r\n    selectedToken: PropTypes.any,\r\n    tokenBalance: PropTypes.any,\r\n    max: PropTypes.any,\r\n    onConfirm: PropTypes.any,\r\n    onDismiss: PropTypes.any\r\n}\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\r\n\r\nexport default function InputField(\r\n    {\r\n        tokenSymbol = \"\",\r\n        isMax=false,\r\n        label=\"\",\r\n        placeHolder=\"\",\r\n        inputValue=\"\",\r\n        onInputChange=null,\r\n        onMax=null,\r\n        selectedToken,\r\n        tokenBalance,\r\n        max,\r\n        onConfirm,\r\n        onDismiss\r\n    }\r\n) {\r\n    const { account } = useActiveWeb3React()\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(max), [max])\r\n\r\n    const valNumber = new BigNumber(inputValue)\r\n    const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n    const enforcer = (nextUserInput) => {\r\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n            onInputChange(nextUserInput)\r\n        }\r\n    }\r\n\r\n    const isBalanceZero = max === '0' || !max\r\n\r\n    const displayBalance = (balance) => {\r\n        try{\r\n            const stakedBalanceBigNumber = getBalanceAmount(balance)\r\n            if (isBalanceZero) {\r\n                return '0'\r\n            }\r\n            if (stakedBalanceBigNumber.gt(0)) {\r\n                return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n            }\r\n            return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card sx={{maxWidth: 620}}>\r\n                <CardContent sx={{background: '#e7e9ec', margin: '5px', borderRadius:'inherit'}}>\r\n                    <div>\r\n                        <p>\r\n                            {selectedToken\r\n                                ? `Balance: ${displayBalance(tokenBalance) ?? 'Loading' } `\r\n                                : ' - '}\r\n                            {\r\n                                (account && isMax && selectedToken) &&\r\n                                <Button variant=\"outlined\" style={{marginLeft:'3px'}} onClick={onMax} size=\"small\">Max</Button>\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div style={{marginTop: '5px'}}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={8} md={8}>\r\n                                <TextField\r\n                                    inputMode=\"decimal\"\r\n                                    step=\"any\"\r\n                                    min=\"0\"\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    value={parseFloat(inputValue)}\r\n                                    variant=\"filled\"\r\n                                    label={label}\r\n                                    placeholder={placeHolder}\r\n                                    title={label}\r\n                                    onChange={(event) => {\r\n                                        enforcer(event.currentTarget.value.replace(/,/g, '.'))\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} md={4} style={{fontSize:'10px', display: 'flex', alignItems:'center'}}>\r\n                                <Button onClick={onMax} variant=\"outlined\" style={{marginRight: '5px'}}>\r\n                                    Max\r\n                                </Button>\r\n                                {tokenSymbol}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={\r\n                            async () => {\r\n                                setPendingTx(true)\r\n                                try{\r\n                                    await onConfirm(inputValue)\r\n                                    onDismiss()\r\n                                }catch(e){\r\n                                    showError(e.data ? e.data.message : e.message)\r\n                                }finally {\r\n                                    setPendingTx(false)\r\n                                }\r\n                            }}\r\n                        fullWidth\r\n                        disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}>\r\n                        Confirm\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </>\r\n    )\r\n}","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserStakedBalance, updateUserBalance } from '../../../state/actions';\r\nimport { stakeFarm } from '../../../utils/calls';\r\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from '../../../config/index';\r\nimport { BIG_TEN } from '../../../utils/bigNumber';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\n\r\nconst options = {\r\n    gasLimit: DEFAULT_GAS_LIMIT,\r\n};\r\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst sousStakeBnb = async (sousChefContract, amount) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useStakePool = (sousId, isUsingBnb = false, isCompound=false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const masterChefContract = useMasterchef();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleStake = useCallback(async (amount, decimals) => {\r\n        await stakeFarm(masterChefContract, sousId, amount, isCompound);\r\n        dispatch(updateUserStakedBalance(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n    }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\r\n    return { onStake: handleStake };\r\n};\r\nexport default useStakePool;","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from '../../../state/actions';\r\nimport { unstakeFarm } from '../../../utils/calls';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n    const gasPrice = getGasPrice();\r\n    const units = parseUnits(amount, decimals);\r\n    const tx = await sousChefContract.withdraw(units.toString(), {\r\n        gasPrice,\r\n    });\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.emergencyWithdraw({ gasPrice });\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const masterChefContract = useMasterchef();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleUnstake = useCallback(async (amount, decimals) => {\r\n        await unstakeFarm(masterChefContract, sousId, amount);\r\n        dispatch(updateUserStakedBalance(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n        dispatch(updateUserPendingReward(sousId, account));\r\n    }, [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId]);\r\n    return { onUnstake: handleUnstake };\r\n};\r\nexport default useUnstakePool;","import PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport {useMemo, useState} from \"react\";\r\nimport {ethers} from \"ethers\";\r\nimport InputField from \"./InputField\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {useAppDispatch} from \"../../../redux/store\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport useStakePool from \"../hooks/useStakePool\";\r\nimport useUnstakePool from \"../hooks/useUnstakePool\";\r\nimport {getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nconst StakeAction = ({\r\n    isBnbPool,\r\n    pool,\r\n    stakingTokenBalance,\r\n    isDisabled,\r\n    isUnstake\r\n}) => {\r\n    const { sousId, stakingToken, earningTokenPrice, apr, userData, stakingLimit, earningToken } = pool\r\n    const [open, setOpen] = useState(false)\r\n    const [input, setInput] = useState(false)\r\n    const { onStake } = useStakePool(sousId, isBnbPool)\r\n    const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n    const { account } = useActiveWeb3React()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(stakingTokenBalance), [stakingTokenBalance])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const openDialog = () => {\r\n        setInput(\"\")\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleInput = (val) => {\r\n        setInput(val)\r\n    }\r\n\r\n    const handleMax = () => {\r\n        setInput(fullBalance)\r\n    }\r\n\r\n    const handleStake = async (amount) => {\r\n        try {\r\n            await onStake(amount)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            // console.log(e)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const handleUnstake = async (amount) => {\r\n        try{\r\n            await onUnstake(amount)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            // console.log(e)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const onDismiss = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button variant=\"contained\" color=\"primary\" disabled={isDisabled} onClick={openDialog} className=\"px-2 md:px-4 py-2 md:py-3 text-center text-xs md:text-sm text-white bg-sky-600 rounded-lg font-medium hover:bg-blue-600 transition-all disabled:bg-opacity-50\">\r\n                {\r\n                    isUnstake ?\r\n                        \"Unstake\"\r\n                        : \"Stake\"\r\n                }\r\n            </button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>\r\n                    {\r\n                        isUnstake ?\r\n                            \"Unstake\"\r\n                            : \"Stake\"\r\n                    } {stakingToken.symbol}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <InputField\r\n                        tokenSymbol={stakingToken.symbol}\r\n                        selectedToken={stakingToken.address}\r\n                        tokenBalance={stakingTokenBalance}\r\n                        onInputChange={handleInput}\r\n                        inputValue={input}\r\n                        max={stakingTokenBalance}\r\n                        onMax={handleMax}\r\n                        onConfirm={isUnstake ? handleUnstake : handleStake}\r\n                        onDismiss={onDismiss}\r\n                    />\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nStakeAction.propTypes = {\r\n    isUnstake: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n    pool: PropTypes.any,\r\n    stakingTokenBalance: PropTypes.any,\r\n    isBnbPool: PropTypes.bool\r\n}\r\n\r\nexport default StakeAction\r\n\r\n","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserBalance, updateUserPendingReward } from '../../../state/actions';\r\nimport { harvestFarm } from '../../../utils/calls';\r\nimport { BIG_ZERO } from '../../../utils/bigNumber';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport { DEFAULT_GAS_LIMIT } from '../../../config/index';\r\n\r\nconst options = {\r\n    gasLimit: DEFAULT_GAS_LIMIT,\r\n};\r\nconst harvestPool = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit('0', {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst harvestPoolBnb = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit({...options, value: BIG_ZERO, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const masterChefContract = useMasterchef();\r\n    const handleHarvest = useCallback(async () => {\r\n        await harvestFarm(masterChefContract, sousId);\r\n        dispatch(updateUserPendingReward(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n    }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\r\n    return { onReward: handleHarvest };\r\n};\r\nexport default useHarvestPool;","import PropTypes from 'prop-types'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport useHarvestPool from \"../hooks/useHarvestPool\";\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\n\r\nfunction HarvestAction({\r\n    pool,\r\n    hasEarnings,\r\n    needsApproval,\r\n    isBnbPool,\r\n    isDisabled=false\r\n    }) {\r\n    const { sousId } = pool\r\n    const { onReward } = useHarvestPool(sousId, isBnbPool)\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const onHarvest = async () => {\r\n        setPendingTx(true)\r\n        try {\r\n            await onReward()\r\n            // showFulfill('Successfully Harvested')\r\n            setPendingTx(false)\r\n        } catch (e) {\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n            setPendingTx(false)\r\n        }\r\n    }\r\n    return (\r\n        <button variant=\"contained\" disabled={(!hasEarnings || needsApproval || pendingTx) || isDisabled} onClick={onHarvest} className=\"px-2 md:px-4 py-2 md:py-3 text-center text-xs md:text-sm text-white bg-sky-600 rounded-lg font-medium hover:bg-blue-600 transition-all disabled:bg-opacity-50\" >\r\n            Harvest\r\n        </button>\r\n    )\r\n}\r\n\r\nHarvestAction.propTypes = {\r\n    pool: PropTypes.any,\r\n    hasEarnings: PropTypes.bool,\r\n    needsApproval: PropTypes.bool,\r\n    isBnbPool: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n}\r\n\r\nexport default HarvestAction","import PropTypes from 'prop-types'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport useHarvestPool from \"../hooks/useHarvestPool\";\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\nimport useStakePool from \"../hooks/useStakePool\";\r\n\r\nfunction CompoundAction({\r\n    pool,\r\n    hasEarnings,\r\n    needsApproval,\r\n    isBnbPool,\r\n    fullBalance,\r\n    isDisabled=false\r\n}) {\r\n    const { sousId, earningToken } = pool\r\n    const { onStake } = useStakePool(sousId, isBnbPool)\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const onCompound = async () => {\r\n        setPendingTx(true)\r\n        try {\r\n            await onStake(fullBalance, earningToken.decimals, true)\r\n            // showFulfill('Successfully Compound Rewards')\r\n            setPendingTx(false)\r\n        } catch (e) {\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n            setPendingTx(false)\r\n        }\r\n    }\r\n    return (\r\n        <button variant=\"contained\" disabled={!hasEarnings || needsApproval || pendingTx || isDisabled} onClick={onCompound} fullWidth className=\"px-2 md:px-4 py-2 md:py-3 mt-4 mx-auto table text-center text-xs md:text-sm text-black bg-white rounded-lg font-medium hover:bg-sky-600 hover:text-white transition-all disabled:bg-opacity-50\" >\r\n            Compound Rewards\r\n        </button>\r\n    )\r\n}\r\n\r\nCompoundAction.propTypes = {\r\n    pool: PropTypes.any,\r\n    hasEarnings: PropTypes.bool,\r\n    needsApproval: PropTypes.bool,\r\n    isBnbPool: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n    fullBalance: PropTypes.any\r\n}\r\n\r\nexport default CompoundAction","import BigNumber from 'bignumber.js'\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport {PoolCategory} from \"../../config/constants/types\";\r\nimport {BIG_ZERO} from \"../../utils/bigNumber\";\r\nimport StakeAction from \"./components/StakeAction\";\r\nimport HarvestAction from \"./components/HarvestAction\";\r\nimport CompoundAction from \"./components/CompoundAction\";\r\nimport {getFullDisplayBalance} from \"../../utils/formatBalance\";\r\nimport {useERC20} from \"../../hooks/useContract\";\r\nimport {useApprovePool} from \"../pool-mtpl/hooks/useApprove\";\r\n\r\nStakeActions.propTypes = {\r\n    pool: PropTypes.any,\r\n    isCompounding: PropTypes.bool,\r\n    stakedBalance: PropTypes.any,\r\n    timeStamp: PropTypes.any\r\n}\r\n\r\nfunction StakeActions ({\r\n    pool,\r\n    isCompounding=false,\r\n    timeStamp=\"0.00\"\r\n}) {\r\n    const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\r\n    const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n    const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n    const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n    const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n    const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n    const needsApproval = !allowance.gt(0) && !isBnbPool\r\n    const isStaked = stakedBalance.gt(0)\r\n    const isLoading = !userData\r\n    const hasEarnings = earnings.toNumber() > 0\r\n    const fullBalance = getFullDisplayBalance(stakedBalance, earningToken.decimals)\r\n    const stakingTokenContract = useERC20(stakingToken.address || '')\r\n    const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\r\n    const isDisabled = false;\r\n\r\n    return (\r\n        <>\r\n            {/* <Grid container sx={{ py: 3, textAlign: 'center' }} spacing={3}>\r\n                <Grid item xs={4} md={4}>\r\n                    <HarvestAction hasEarnings={hasEarnings} isDisabled={isDisabled} needsApproval={needsApproval} isBnbPool={isBnbPool} pool={pool} />\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    {\r\n                        needsApproval && <Button variant=\"contained\" color=\"info\" onClick={handleApprove}>\r\n                            Approve\r\n                        </Button>\r\n                    }\r\n                    {\r\n                        !needsApproval && <StakeAction pool={pool}stakingTokenBalance={stakingTokenBalance} isDisabled={needsApproval} />\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    <StakeAction pool={pool} stakingTokenBalance={stakedBalance} isDisabled={needsApproval || !isStaked} isUnstake />\r\n                </Grid>\r\n            </Grid> */}\r\n\r\n            <div className='flex items-center justify-between gap-4'>\r\n                <div className='col-span-1'>\r\n                    <HarvestAction hasEarnings={hasEarnings} isDisabled={isDisabled} needsApproval={needsApproval} isBnbPool={isBnbPool} pool={pool} />\r\n                </div>\r\n                <div className='col-span-1'>\r\n                    {\r\n                            needsApproval && <button variant=\"contained\" color=\"info\" onClick={handleApprove} className=\"px-2 md:px-4 py-2 md:py-3 text-center text-xs md:text-sm text-white bg-pink-600 rounded-lg font-medium hover:bg-sky-600 transition-all disabled:bg-opacity-50\">\r\n                                Approve\r\n                            </button>\r\n                        }\r\n                        {\r\n                            !needsApproval && <StakeAction pool={pool}stakingTokenBalance={stakingTokenBalance} isDisabled={needsApproval} />\r\n                        }\r\n                </div>\r\n                <div className='col-span-1'>\r\n                    <StakeAction pool={pool} stakingTokenBalance={stakedBalance} isDisabled={needsApproval || !isStaked} isUnstake />\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                isCompounding &&\r\n                <div style={{paddingBottom: \"10px\"}}>\r\n                    <CompoundAction pool={pool} hasEarnings={hasEarnings} needsApproval={needsApproval} isDisabled={isDisabled} fullBalance={fullBalance} />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StakeActions","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserAllowance } from '../../../state/actions';\r\n\r\nimport { useSousChef } from '../../../hooks/useContract';\r\nimport { useCallWithGasPrice } from '../../../hooks/useCallWithGasPrice';\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\n\r\nexport const useApprovePool = (lpContract, sousId, earningTokenSymbol) => {\r\n    const [requestedApproval, setRequestedApproval] = useState(false);\r\n    const { callWithGasPrice } = useCallWithGasPrice();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleApprove = useCallback(async () => {\r\n        try {\r\n            setRequestedApproval(true);\r\n            const tx = await callWithGasPrice(lpContract, 'approve', [sousChefContract.address, ethers.constants.MaxUint256]);\r\n            const receipt = await tx.wait();\r\n            dispatch(updateUserAllowance(sousId, account));\r\n            if (receipt.status) {\r\n                showFulfill(\"Successfully Approved!\")\r\n                setRequestedApproval(false);\r\n            }\r\n            else {\r\n                // user rejected tx or didn't go thru\r\n                showError('Please try again. Confirm the transaction and make sure you are paying enough gas!');\r\n                setRequestedApproval(false);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!');\r\n        }\r\n    }, [\r\n        account,\r\n        dispatch,\r\n        lpContract,\r\n        sousChefContract,\r\n        sousId,\r\n        earningTokenSymbol,\r\n        showFulfill,\r\n        showError,\r\n        callWithGasPrice,\r\n    ]);\r\n    return { handleApprove, requestedApproval };\r\n};","import PropTypes from 'prop-types'\r\nimport { alpha, styled } from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Card,\r\n    Grid,\r\n    Avatar,\r\n    Divider,\r\n    Typography,\r\n    Button\r\n} from '@material-ui/core';\r\nimport BigNumber from 'bignumber.js'\r\n// utils\r\n//\r\nimport SvgIconStyle from '../../components/SvgIconStyle';\r\n\r\nimport {BIG_ZERO} from \"../../utils/bigNumber\";\r\nimport {getAprData} from \"./helpers\";\r\nimport {getBalanceNumber} from \"../../utils/formatBalance\";\r\nimport {fCurrency, fShortenNumber} from \"../../utils/formatNumber\";\r\nimport StakeActions from \"./StakeActions\";\r\nimport {formatUnit} from \"../../config/index\";\r\nimport React from \"react\";\r\nimport FarmActions from \"../farm-mtpl/components/farmActions\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst CardMediaStyle = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    position: 'relative',\r\n    justifyContent: 'center',\r\n    paddingTop: 'calc(100% * 9 / 16)',\r\n    '&:before': {\r\n        top: 0,\r\n        zIndex: 9,\r\n        content: \"''\",\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        backdropFilter: 'blur(3px)',\r\n        WebkitBackdropFilter: 'blur(3px)', // Fix on Mobile\r\n        borderTopLeftRadius: theme.shape.borderRadiusMd,\r\n        borderTopRightRadius: theme.shape.borderRadiusMd,\r\n        backgroundColor: alpha(theme.palette.primary.darker, 0.72)\r\n    }\r\n}));\r\n\r\nconst CoverImgStyle = styled('img')({\r\n    top: 0,\r\n    zIndex: 8,\r\n    width: '100%',\r\n    height: '100%',\r\n    objectFit: 'cover',\r\n    position: 'absolute'\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction InfoItem(number, label=\"\") {\r\n    return (\r\n        <Grid item xs={4}>\r\n            <span variant=\"caption\" style={{ mb: 0.5, color: 'text.white', display: 'block', fontSize: '12px' }}>\r\n                {label}\r\n            </span>\r\n            <span variant=\"subtitle1\" style={{ fontSize: '12px' }}>{number}</span>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction formatTime(timeStmp) {\r\n    var days = Math.floor(timeStmp / (1000 * 60 * 60 * 24));\r\n    var hours = Math.floor((timeStmp % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    var minutes = Math.floor((timeStmp % (1000 * 60 * 60)) / (1000 * 60));\r\n    // var seconds = Math.floor((timeStmp % (1000 * 60)) / 1000);\r\n\r\n    let formt = days + \"d \" + hours + \"h \" + minutes + \"m\";\r\n    return formt;\r\n}\r\n\r\nfunction FarmInfo(label=\"\", value=\"\"){\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={6} md={6}>\r\n                {label}\r\n            </Grid>\r\n            <Grid item xs={6} md={6} sx={{fontWeight:\"bold\", fontSize: '12px' }}>\r\n                {value}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nStakeCard.propTypes = {\r\n    pool: PropTypes.object.isRequired,\r\n    account: PropTypes.any,\r\n    performanceFee: PropTypes.number\r\n};\r\n\r\nexport default function StakeCard({ pool, account, performanceFee=0, ...other }) {\r\n    const { stakingToken, earningToken, userData, totalStaked, stakingTokenPrice, sousId, poolWeight } = pool\r\n    const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n    const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n\r\n    const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n    const getTotalStakedBalance = () => getBalanceNumber(totalStaked, stakingToken.decimals).toFixed(2)\r\n    const withdraw = 604800\r\n    const isCompoundPool = sousId === 0\r\n    const lastInvest = userData.userLast\r\n    \r\n    const weight = poolWeight || 0\r\n\r\n    const investWithdraw = (parseFloat(lastInvest) + parseFloat(withdraw)) *  1000\r\n    const nowStamp = Date.now()\r\n\r\n    const differ = investWithdraw - nowStamp;\r\n    const timeSt = ((differ/1000) > 0 ? (differ/1000) : 0)\r\n    const hours = formatTime(timeSt * 1000)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-span-1 md:col-span-1\">\r\n                <div className=\"p-5 border-gray-300 shadow-xl hover:shadow-2xl bg-white dark:bg-black bg-opacity-100 dark:bg-opacity-50 rounded-3xl transition-all\">\r\n                    <div className=\"relative\">\r\n                        <div className=\"bg-gradient-to-r from-sky-600 to-blue-700 bg-opacity-25 rounded-3xl overflow-hidden z-10\">\r\n                            <div className=\"px-6 py-6 transition-all flex align-middle justify-between relative z-10\">\r\n                                <div className=\"w-32 h-32 bg-circle bg-white rounded-full opacity-10 absolute pin-t ml-8 p-2 z-20 top-0 right-0 -mr-14 -mt-14\" />\r\n                                <div className=\"w-32 h-32 bg-circle bg-white rounded-full opacity-5 absolute pin-t ml-8 p-2 z-20 bottom-0 left-0 -ml-14 -mb-14\" />\r\n                                <div>\r\n                                    <div className=\"text-white font-semibold mb-3 text-sm\">\r\n                                        {stakingToken.symbol} POOL\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    {/*<div className=\"text-white font-semibold mb-3 text-sm\">Farming APY </div>*/}\r\n                                    {/*<div className=\"text-white font-semibold text-xs cursor-help text-right\" readOnly>*/}\r\n                                    {/*    */}\r\n                                    {/*</div>*/}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex align-middle justify-center -mt-6 mb-15 relative z-10\">\r\n                        <div className=\"rounded-full overflow-hidden -mx-2\">\r\n                            <img src={`./tokens/mlx.png`} className=\"rounded-full border-0 border-white\" width={45} alt=\"\" />\r\n                        </div>\r\n                        {/*<div className=\"rounded-full overflow-hidden -mx-2\">*/}\r\n                        {/*    <img src=\"images/dai.png\" className=\"rounded-full border-0 border-white\" width={45} alt=\"\" />*/}\r\n                        {/*</div>*/}\r\n                    </div>\r\n                    {/* <div class=\"flex justify-center my-6\">\r\n                                      <div class=\"w-auto px-5 pt-3 pb-2 bg-white text-green-800 text-sm rounded-full font-semibold\">Active For LDO Only</div>\r\n                                  </div> */}\r\n                    <div className=\"flex justify-between mb-1\">\r\n                        <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">\r\n                            Earn\r\n                        </div>\r\n                        <div className=\"text-black dark:text-white font-semibold text-xs\">\r\n                            {earningToken.symbol}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between mb-1\">\r\n                        <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">\r\n                            Stake\r\n                        </div>\r\n                        <div className=\"text-black dark:text-white font-semibold text-xs\">\r\n                            {stakingToken.symbol}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between mb-1\">\r\n                        <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">\r\n                            Multiplier\r\n                        </div>\r\n                        <div className=\"text-black dark:text-white font-semibold text-xs\">\r\n                            {Math.round(weight/100)}x\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between mb-1\">\r\n                        <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">\r\n                            Liquidity\r\n                        </div>\r\n                        <div className=\"text-black dark:text-white font-semibold text-xs\">\r\n                            {fCurrency(parseFloat((getTotalStakedBalance() * stakingTokenPrice).toString()).toLocaleString())}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between mb-1\">\r\n                        <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">\r\n                            Total APR\r\n                        </div>\r\n                        <div className=\"text-black dark:text-white font-semibold text-xs\">\r\n                            {earningsPercentageToDisplay?.toFixed(2)}%\r\n                        </div>\r\n                    </div>\r\n                    {/*<div className=\"flex justify-between mb-1\">*/}\r\n                    {/*    <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">  – Pool APY</div>*/}\r\n                    {/*    <div className=\"text-black dark:text-white font-semibold text-xs\">5.19%</div>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div className=\"flex justify-between mb-1\">*/}\r\n                    {/*    <div className=\"text-black dark:text-white dark:text-opacity-70 font-semibold mb-3 text-xs font-semibold\">  – LDO Farming APY</div>*/}\r\n                    {/*    <div className=\"text-black dark:text-white font-semibold text-xs\">17.16%</div>*/}\r\n                    {/*</div>*/}\r\n                    {/*<button className=\"px-2 py-4 mt-2 text-center text-sm text-white bg-indigo-900 rounded-lg w-full font-medium hover:bg-blue-800 transition-all\">*/}\r\n                    {/*    <span>Connect Wallet</span>*/}\r\n                    {/*</button>*/}\r\n                    <StakeActions isCompounding={isCompoundPool} pool={pool} timeStamp={hours} />\r\n                    <Divider />\r\n\r\n                    <Grid container sx={{ pt: 3, textAlign: 'center' }}>\r\n                        {InfoItem(formatUnit(stakedBalance), \"STAKED\")}\r\n                        {InfoItem(formatUnit(earnings, 8), \"REWARDS\")}\r\n                        {InfoItem(`${stakedBalance > 0 ? (hours) : \"-\"}`, \"LOCKED\")}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import BigNumber from 'bignumber.js';\r\nimport { getApy } from '../../utils/compoundApyHelpers';\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from '../../utils/formatBalance';\r\n\r\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\r\n    const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\r\n    const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\r\n    const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\r\n    const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\r\n    const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\r\n    return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance };\r\n};\r\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\r\n    const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\r\n    const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\r\n    const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\r\n    const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\r\n    const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\r\n    return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance };\r\n};\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000;\r\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;\r\nexport const getAprData = (pool, performanceFee) => {\r\n    const { isAutoVault, apr } = pool;\r\n    //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n    const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;\r\n    if (isAutoVault) {\r\n        const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100;\r\n        return { apr: autoApr, autoCompoundFrequency };\r\n    }\r\n    return { apr, autoCompoundFrequency };\r\n};\r\nexport const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice) => {\r\n    const hasAutoEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\r\n    const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare);\r\n    const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction);\r\n    const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0;\r\n    const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\r\n    const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\r\n    return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay };\r\n};\r\nexport const getPoolBlockInfo = (pool, currentBlock) => {\r\n    const { startBlock, endBlock, isFinished } = pool;\r\n    const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\r\n    const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\r\n    const blocksRemaining = Math.max(endBlock - currentBlock, 0);\r\n    const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\r\n    const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\r\n    return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay };\r\n};\r\n","import React, {useMemo} from \"react\";\r\n// importing Link from react-router-dom to navigate to\r\n// different end points.\r\nimport { Link } from \"react-router-dom\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport { render } from 'react-dom'\r\n\r\nimport useActiveWeb3React from \"../hooks/useWeb3\";\r\nimport ConnectWallet from \"../components/mtpl/ConnectWallet\";\r\nimport {useFetchPublicPoolsData, useFetchUserPools, usePools} from \"../state/pools/hooks\";\r\nimport {usePollFarmsPublicData} from \"../state/farms/hooks\";\r\nimport {StakeCard} from \"./stake-mtpl\";\r\nimport {shortAddress} from \"../utils/pageHelpers\";\r\nimport MTPLProfile from \"./MTPLProfile\";\r\n\r\n\r\nconst Pools = () => {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools()\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\r\n    return [...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  usePollFarmsPublicData()\r\n  useFetchPublicPoolsData()\r\n  useFetchUserPools(account)\r\n\r\n  return (\r\n    <>\r\n    <div className='mx-auto lg:ml-64'>\r\n      <div className='hero-section px-5 py-4 md:px-10 md:py-4 h-full relative'>\r\n        <nav className=\"flex items-center justify-between mb-4\">\r\n          <h2 className=\"title text-black dark:text-white text-opacity-75 text-3xl font-bold\">\r\n            Stake & Earn MLX Rewards\r\n          </h2>\r\n          {\r\n            !account && <ConnectWallet />\r\n          }\r\n          {\r\n            account &&\r\n            <MTPLProfile />\r\n          }\r\n        </nav>\r\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 2xl:grid-cols-3 gap-5 md:gap-6 mb-8\">\r\n          {pools && pools.map((farm) => (\r\n              <StakeCard pool={farm} account={account} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n  \r\nexport default Pools;","import React, { useRef, useState } from 'react';\r\n// material\r\nimport {\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText, DialogActions, Dialog,\r\n    List, ListItem, ListItemAvatar, Avatar, ListItemText,\r\n    Typography, Grid, TextField, IconButton\r\n} from '@material-ui/core';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\n// import {QRCode} from \"react-qrcode-logo\";\r\n// import {\r\n//     CheckCircleRounded,\r\n//     CloseOutlined,\r\n//     OpenInNewRounded,\r\n//     QrCodeScannerRounded,\r\n// } from \"@material-ui/icons\";\r\n\r\nimport useConnect from \"../hooks/useConnect\";\r\nimport {shortAddress} from \"../utils/pageHelpers\";\r\nimport {appConstants, EXPLORER} from \"../config/constants\";\r\nimport {ALL_TOKENS} from \"../contexts/TokenList\";\r\n\r\nexport default function MTPLProfile() {\r\n    const anchorRef = useRef(null);\r\n    const { account } = useWeb3React()\r\n    const { logout } = useConnect()\r\n    const [openScan, setScan] = useState(false);\r\n    const [recipentAddress, setRecipent] = useState(\"\");\r\n    const [scanError, setScanError] = useState(null);\r\n    // const navigate = useNavigate();\r\n    // const { enqueueSnackbar } = useSnackbar();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleScan = (data) => {\r\n        // console.log(data)\r\n        setScanError(null)\r\n        if(data){\r\n            setRecipent(data.text)\r\n            toggleScan()\r\n        }\r\n    }\r\n    const handleError = (err) => {\r\n        setScanError(err.toString())\r\n        // console.log(err)\r\n    }\r\n\r\n    const toggleScan = () => {\r\n        setScan(!openScan)\r\n    }\r\n\r\n    const checkLoad = (val) => {\r\n        // console.log(val)\r\n    }\r\n\r\n    const inputRecipent = (val) => {\r\n        setRecipent(val.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<Button*/}\r\n            {/*    */}\r\n            {/*    variant=\"contained\"*/}\r\n            {/*    sx={{*/}\r\n            {/*        padding: 1,*/}\r\n            {/*        height: 44,*/}\r\n            {/*        borderRadius: '25px'*/}\r\n            {/*    }}*/}\r\n            {/*>*/}\r\n            {/*    {shortAddress(account)}*/}\r\n            {/*</Button>*/}\r\n\r\n            <button\r\n                onClick={handleClickOpen}\r\n                className=\"px-4 py-3 text-sm text-center text-white bg-gradient-to-r from-sky-600 to-blue-900 rounded-lg font-medium hover:from-sky-800 hover:to-indigo-800 transition-all disabled:bg-opacity-50\"\r\n            >\r\n              <span>\r\n                  {\r\n                      shortAddress(account)\r\n                  }\r\n              </span>\r\n            </button>\r\n\r\n            <Dialog open={open} maxWidth='md' onClose={handleClose}>\r\n                <DialogTitle>\r\n                    <a href={`${EXPLORER}address/${account}/`} target=\"_blank\" rel=\"noreferrer\">{shortAddress(account)} <i className={\"las la-external-link\"} /></a>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {/*<DialogContentText>*/}\r\n                    {/*    <b>Explore Metaple Profile!</b><br />View recent transactions, Quick tools for UDE Tokens, and many more.. </DialogContentText>*/}\r\n                    {/*<Grid container spacing={2} sx={{textAlign:'center'}}>*/}\r\n                    {/*    /!*<Grid item xs={12} lg={12} md={12}>*!/*/}\r\n                    {/*    /!*    <h2>Receive UDE (or Any Token)</h2>*!/*/}\r\n                    {/*    /!*    <QRCode size={240} logoImage={`/tokens/${appConstants.symbol.toLowerCase()}.png`} value={account} />*!/*/}\r\n                    {/*    /!*</Grid>*!/*/}\r\n                    {/*    /!* <Grid item xs={12} lg={6} md={6} sx={{display: 'flex', alignItems:'center'}}> *!/*/}\r\n                    {/*    /!*    <div> *!/*/}\r\n                    {/*    /!*        <h2>Send UDE</h2> *!/*/}\r\n                    {/*    /!*        <Grid container spacing={1}> *!/*/}\r\n                    {/*    /!*            <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                { *!/*/}\r\n                    {/*    /!*                    openScan && <QrReader *!/*/}\r\n                    {/*    /!*                        onLoad={checkLoad} *!/*/}\r\n                    {/*    /!*                        facingMode='back' *!/*/}\r\n                    {/*    /!*                        delay={500} *!/*/}\r\n                    {/*    /!*                        style={{ *!/*/}\r\n                    {/*    /!*                            height: 240, *!/*/}\r\n                    {/*    /!*                            width: 320, *!/*/}\r\n                    {/*    /!*                        }} *!/*/}\r\n                    {/*    /!*                        onError={handleError} *!/*/}\r\n                    {/*    /!*                        onScan={handleScan} *!/*/}\r\n                    {/*    /!*                    /> *!/*/}\r\n                    {/*    /!*                } *!/*/}\r\n                    {/*    /!*            </Grid> *!/*/}\r\n                    {/*    /!*            { *!/*/}\r\n                    {/*    /!*                (openScan && scanError) && *!/*/}\r\n                    {/*    /!*                <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                    {scanError} *!/*/}\r\n                    {/*    /!*                </Grid> *!/*/}\r\n                    {/*    /!*            } *!/*/}\r\n                    {/*    /!*            <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                { *!/*/}\r\n                    {/*    /!*                    !openScan && <Button variant=\"contained\" onClick={toggleScan}> *!/*/}\r\n                    {/*    /!*                        Scan <QrCodeScannerRounded /> *!/*/}\r\n                    {/*    /!*                    </Button> *!/*/}\r\n                    {/*    /!*                } *!/*/}\r\n\r\n                    {/*    /!*                { *!/*/}\r\n                    {/*    /!*                    openScan && <Button variant=\"contained\" onClick={toggleScan} color=\"error\"> *!/*/}\r\n                    {/*    /!*                        Close <CloseOutlined /> *!/*/}\r\n                    {/*    /!*                    </Button> *!/*/}\r\n                    {/*    /!*                } *!/*/}\r\n                    {/*    /!*            </Grid> *!/*/}\r\n                    {/*    /!*            <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                <TextField value={recipentAddress} onChange={inputRecipent} type=\"text\" fullWidth variant=\"filled\" label={`Enter ${appConstants.symbol} Address`} placeholder=\"Receiver Address\" title={`Enter ${appConstants.symbol} Address`} /> *!/*/}\r\n                    {/*    /!*            </Grid> *!/*/}\r\n                    {/*    /!*            <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                <TextField type=\"number\" fullWidth variant=\"filled\" label={`Enter ${appConstants.symbol} Amount`} placeholder={`${appConstants.symbol} Amount to send`} title={`Enter ${appConstants.symbol} Amount`} /> *!/*/}\r\n                    {/*    /!*            </Grid> *!/*/}\r\n                    {/*    /!*            <Grid item xs={12} md={12}> *!/*/}\r\n                    {/*    /!*                <Button variant=\"outlined\" fullWidth> *!/*/}\r\n                    {/*    /!*                    Quick Send *!/*/}\r\n                    {/*    /!*                </Button> *!/*/}\r\n                    {/*    /!*            </Grid> *!/*/}\r\n                    {/*    /!*        </Grid> *!/*/}\r\n                    {/*    /!*    </div> *!/*/}\r\n                    {/*    /!* </Grid> *!/*/}\r\n                    {/*</Grid>*/}\r\n                    <div>\r\n                        {/* <Grid container> */}\r\n                        {/* <Grid item xs={12} lg={6} md={6}> */}\r\n                        {/*    <h4>Your Balances</h4> */}\r\n                        {/*    <List> */}\r\n                        {/*        <ListItem */}\r\n                        {/*            button */}\r\n                        {/*            secondaryAction={ */}\r\n                        {/*                <Typography> */}\r\n                        {/*                    0 */}\r\n                        {/*                </Typography> */}\r\n                        {/*            } */}\r\n                        {/*        > */}\r\n                        {/*            <ListItemAvatar> */}\r\n                        {/*                <Avatar src=\"/tokens/bnb.png\" /> */}\r\n                        {/*            </ListItemAvatar> */}\r\n                        {/*            <ListItemText */}\r\n                        {/*                primary=\"BNB Balance\" */}\r\n                        {/*                secondary=\"BNB Balance in your wallet\" */}\r\n                        {/*            /> */}\r\n                        {/*        </ListItem> */}\r\n                        {/*        <ListItem */}\r\n                        {/*            button */}\r\n                        {/*            secondaryAction={ */}\r\n                        {/*                <Typography> */}\r\n                        {/*                    0 */}\r\n                        {/*                </Typography> */}\r\n                        {/*            } */}\r\n                        {/*        > */}\r\n                        {/*            <ListItemAvatar> */}\r\n                        {/*                <Avatar src=\"/tokens/ude.png\" /> */}\r\n                        {/*            </ListItemAvatar> */}\r\n                        {/*            <ListItemText */}\r\n                        {/*                primary={`${appConstants.symbol} Balance`} */}\r\n                        {/*                secondary={`${appConstants.symbol} Balance in your wallet`} */}\r\n                        {/*            /> */}\r\n                        {/*        </ListItem> */}\r\n                        {/*    </List> */}\r\n                        {/* </Grid> */}\r\n                        {/*    <Grid item xs={12} lg={6} md={6}> */}\r\n                        {/*        <h4>UDE LP Balances</h4> */}\r\n                        {/*        <List> */}\r\n                        {/*            <ListItem */}\r\n                        {/*                button */}\r\n                        {/*                secondaryAction={ */}\r\n                        {/*                    <Typography> */}\r\n                        {/*                        0 */}\r\n                        {/*                    </Typography> */}\r\n                        {/*                } */}\r\n                        {/*            > */}\r\n                        {/*                <ListItemAvatar> */}\r\n                        {/*                    <div style={{display: 'flex'}}> */}\r\n                        {/*                        <Avatar src=\"/tokens/bnb.png\" /> */}\r\n                        {/*                        <Avatar src={`/tokens/${appConstants.symbol.toLowerCase()}.png`} sx={{marginLeft: '-20px', backgroundColor: 'white'}} /> */}\r\n                        {/*                    </div> */}\r\n                        {/*                </ListItemAvatar> */}\r\n                        {/*                <ListItemText */}\r\n                        {/*                    primary={`${appConstants.symbol.toUpperCase()}/BNB LP Balance`} */}\r\n                        {/*                    secondary=\"Liquidity Pool Tokens\" */}\r\n                        {/*                /> */}\r\n                        {/*            </ListItem> */}\r\n                        {/*            <ListItem */}\r\n                        {/*                button */}\r\n                        {/*                secondaryAction={ */}\r\n                        {/*                    <Typography> */}\r\n                        {/*                        0 */}\r\n                        {/*                    </Typography> */}\r\n                        {/*                } */}\r\n                        {/*            > */}\r\n                        {/*                <ListItemAvatar> */}\r\n                        {/*                    <div style={{display: 'flex'}}> */}\r\n                        {/*                        <Avatar src={`/tokens/${ALL_TOKENS.busd}.png`} /> */}\r\n                        {/*                        <Avatar src={`/tokens/${appConstants.symbol.toLowerCase()}.png`} sx={{marginLeft: '-20px', backgroundColor: 'white'}} /> */}\r\n                        {/*                    </div> */}\r\n                        {/*                </ListItemAvatar> */}\r\n                        {/*                <ListItemText */}\r\n                        {/*                    primary={`${appConstants.symbol.toUpperCase()}/BUSD LP Balance`} */}\r\n                        {/*                    secondary=\"Liquidity Pool Tokens\" */}\r\n                        {/*                /> */}\r\n                        {/*            </ListItem> */}\r\n                        {/*            <ListItem */}\r\n                        {/*                button */}\r\n                        {/*                secondaryAction={ */}\r\n                        {/*                    <Typography> */}\r\n                        {/*                        0 */}\r\n                        {/*                    </Typography> */}\r\n                        {/*                } */}\r\n                        {/*            > */}\r\n                        {/*                <ListItemAvatar> */}\r\n                        {/*                    <div style={{display: 'flex'}}> */}\r\n                        {/*                        <Avatar src={`/tokens/${ALL_TOKENS.cake}.png`} /> */}\r\n                        {/*                        <Avatar src={`/tokens/${appConstants.symbol.toLowerCase()}.png`} sx={{marginLeft: '-20px', backgroundColor: 'white'}} /> */}\r\n                        {/*                    </div> */}\r\n                        {/*                </ListItemAvatar> */}\r\n                        {/*                <ListItemText */}\r\n                        {/*                    primary={`${appConstants.symbol.toUpperCase()}/CAKE LP Balance`} */}\r\n                        {/*                    secondary=\"Liquidity Pool Tokens\" */}\r\n                        {/*                /> */}\r\n                        {/*            </ListItem> */}\r\n                        {/*        </List> */}\r\n                        {/*    </Grid> */}\r\n                        {/* </Grid> */}\r\n                        {/* <hr /> */}\r\n                        {/* <h2>Recent Transactions</h2> */}\r\n\r\n                        {/* <List> */}\r\n                        {/*    <ListItem */}\r\n                        {/*        secondaryAction={ */}\r\n                        {/*            <IconButton> */}\r\n                        {/*                <OpenInNewRounded /> */}\r\n                        {/*            </IconButton> */}\r\n                        {/*        } */}\r\n                        {/*    > */}\r\n                        {/*        <ListItemAvatar> */}\r\n                        {/*            <CheckCircleRounded color=\"success\" /> */}\r\n                        {/*        </ListItemAvatar> */}\r\n                        {/*        <ListItemText */}\r\n                        {/*            primary=\"SWAP\" */}\r\n                        {/*            secondary=\"Swapped 0.1 BNB For 100 UDE\" */}\r\n                        {/*        /> */}\r\n                        {/*    </ListItem> */}\r\n\r\n                        {/*    <ListItem */}\r\n                        {/*        secondaryAction={ */}\r\n                        {/*            <IconButton> */}\r\n                        {/*                <OpenInNewRounded /> */}\r\n                        {/*            </IconButton> */}\r\n                        {/*        } */}\r\n                        {/*    > */}\r\n                        {/*        <ListItemAvatar> */}\r\n                        {/*            <CheckCircleRounded color=\"success\" /> */}\r\n                        {/*        </ListItemAvatar> */}\r\n                        {/*        <ListItemText */}\r\n                        {/*            primary=\"POOL\" */}\r\n                        {/*            secondary=\"Added 0.1 BNB and 100 UDE\" */}\r\n                        {/*        /> */}\r\n                        {/*    </ListItem> */}\r\n\r\n                        {/*    <ListItem */}\r\n                        {/*        secondaryAction={ */}\r\n                        {/*            <IconButton> */}\r\n                        {/*                <OpenInNewRounded /> */}\r\n                        {/*            </IconButton> */}\r\n                        {/*        } */}\r\n                        {/*    > */}\r\n                        {/*        <ListItemAvatar> */}\r\n                        {/*            <CheckCircleRounded color=\"success\" /> */}\r\n                        {/*        </ListItemAvatar> */}\r\n                        {/*        <ListItemText */}\r\n                        {/*            primary=\"FARMING\" */}\r\n                        {/*            secondary=\"Harvested 12.32 UDE from Farming\" */}\r\n                        {/*        /> */}\r\n                        {/*    </ListItem> */}\r\n\r\n                        {/*    <ListItem */}\r\n                        {/*        secondaryAction={ */}\r\n                        {/*            <IconButton> */}\r\n                        {/*                <OpenInNewRounded /> */}\r\n                        {/*            </IconButton> */}\r\n                        {/*        } */}\r\n                        {/*    > */}\r\n                        {/*        <ListItemAvatar> */}\r\n                        {/*            <CheckCircleRounded color=\"success\" /> */}\r\n                        {/*        </ListItemAvatar> */}\r\n                        {/*        <ListItemText */}\r\n                        {/*            primary=\"STAKING\" */}\r\n                        {/*            secondary=\"Staked 2423.32 UDE in UDE Pool\" */}\r\n                        {/*        /> */}\r\n                        {/*    </ListItem> */}\r\n                        {/* </List> */}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        onClick={logout}\r\n                        color=\"error\"\r\n                        variant=\"contained\"\r\n                        className=\"px-4 py-3 text-sm text-center text-white bg-red-500 from-sky-600 to-blue-900 rounded-lg font-medium hover:from-sky-800 hover:to-indigo-800 transition-all disabled:bg-opacity-50\"\r\n                    >\r\n                        Logout\r\n                    </button>\r\n                    <button\r\n                        onClick={handleClose}\r\n                        variant=\"contained\"\r\n                        className=\"px-4 py-3 text-sm text-center text-white bg-gradient-to-r from-sky-600 to-blue-900 rounded-lg font-medium hover:from-sky-800 hover:to-indigo-800 transition-all disabled:bg-opacity-50\"\r\n                    >\r\n                        Close\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { ChainId, Pair } from '@udegoswap/sdk';\r\nimport { Pair as UDEPair, Token } from '@udegoswap/sdk';\r\nimport flatMap from 'lodash/flatMap';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../../config/constants/index';\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport { useAllTokens } from '../../../hooks/Tokens';\r\nimport { addSerializedPair, addSerializedToken, FarmStakedOnly, muteAudio, removeSerializedToken, toggleTheme as toggleThemeAction, unmuteAudio, updateUserDeadline, updateUserExpertMode, updateUserFarmStakedOnly, updateUserSingleHopOnly, updateUserSlippageTolerance, updateGasPrice, addWatchlistToken, addWatchlistPool, updateUserPoolStakedOnly, updateUserPoolsViewMode, updateUserFarmsViewMode, updateUserPredictionChartDisclaimerShow, updateUserPredictionAcceptedRisk, updateUserUsernameVisibility, updateUserExpertModeAcknowledgementShow, } from '../actions';\r\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers';\r\n\r\nexport function useAudioModeManager() {\r\n    const dispatch = useDispatch();\r\n    const audioPlay = useSelector((state) => state.user.audioPlay);\r\n    const toggleSetAudioMode = useCallback(() => {\r\n        if (audioPlay) {\r\n            dispatch(muteAudio());\r\n        }\r\n        else {\r\n            dispatch(unmuteAudio());\r\n        }\r\n    }, [audioPlay, dispatch]);\r\n    return [audioPlay, toggleSetAudioMode];\r\n}\r\nexport function useIsExpertMode() {\r\n    return useSelector((state) => state.user.userExpertMode);\r\n}\r\nexport function useExpertModeManager() {\r\n    const dispatch = useDispatch();\r\n    const expertMode = useIsExpertMode();\r\n    const toggleSetExpertMode = useCallback(() => {\r\n        dispatch(updateUserExpertMode({ userExpertMode: !expertMode }));\r\n    }, [expertMode, dispatch]);\r\n    return [expertMode, toggleSetExpertMode];\r\n}\r\nexport function useThemeManager() {\r\n    const dispatch = useDispatch();\r\n    const isDark = useSelector((state) => state.user.isDark);\r\n    const toggleTheme = useCallback(() => {\r\n        dispatch(toggleThemeAction());\r\n    }, [dispatch]);\r\n    return [isDark, toggleTheme];\r\n}\r\nexport function useUserSingleHopOnly() {\r\n    const dispatch = useDispatch();\r\n    const singleHopOnly = useSelector((state) => state.user.userSingleHopOnly);\r\n    const setSingleHopOnly = useCallback((newSingleHopOnly) => {\r\n        dispatch(updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly }));\r\n    }, [dispatch]);\r\n    return [singleHopOnly, setSingleHopOnly];\r\n}\r\nexport function useUserSlippageTolerance() {\r\n    const dispatch = useDispatch();\r\n    const userSlippageTolerance = useSelector((state) => state.user.userSlippageTolerance);\r\n    const setUserSlippageTolerance = useCallback((slippage) => {\r\n        dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippage }));\r\n    }, [dispatch]);\r\n    return [userSlippageTolerance, setUserSlippageTolerance];\r\n}\r\nexport function useUserFarmStakedOnly(isActive) {\r\n    const dispatch = useDispatch();\r\n    const userFarmStakedOnly = useSelector((state) => state.user.userFarmStakedOnly);\r\n    const setUserFarmStakedOnly = useCallback((stakedOnly) => {\r\n        const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE;\r\n        dispatch(updateUserFarmStakedOnly({ userFarmStakedOnly: farmStakedOnly }));\r\n    }, [dispatch]);\r\n    return [\r\n        userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE,\r\n        setUserFarmStakedOnly,\r\n    ];\r\n}\r\nexport function useUserPoolStakedOnly() {\r\n    const dispatch = useDispatch();\r\n    const userPoolStakedOnly = useSelector((state) => state.user.userPoolStakedOnly);\r\n    const setUserPoolStakedOnly = useCallback((stakedOnly) => {\r\n        dispatch(updateUserPoolStakedOnly({ userPoolStakedOnly: stakedOnly }));\r\n    }, [dispatch]);\r\n    return [userPoolStakedOnly, setUserPoolStakedOnly];\r\n}\r\nexport function useUserPoolsViewMode() {\r\n    const dispatch = useDispatch();\r\n    const userPoolsViewMode = useSelector((state) => state.user.userPoolsViewMode);\r\n    const setUserPoolsViewMode = useCallback((viewMode) => {\r\n        dispatch(updateUserPoolsViewMode({ userPoolsViewMode: viewMode }));\r\n    }, [dispatch]);\r\n    return [userPoolsViewMode, setUserPoolsViewMode];\r\n}\r\nexport function useUserFarmsViewMode() {\r\n    const dispatch = useDispatch();\r\n    const userFarmsViewMode = useSelector((state) => state.user.userFarmsViewMode);\r\n    const setUserFarmsViewMode = useCallback((viewMode) => {\r\n        dispatch(updateUserFarmsViewMode({ userFarmsViewMode: viewMode }));\r\n    }, [dispatch]);\r\n    return [userFarmsViewMode, setUserFarmsViewMode];\r\n}\r\nexport function useUserPredictionAcceptedRisk() {\r\n    const dispatch = useDispatch();\r\n    const userPredictionAcceptedRisk = useSelector((state) => state.user.userPredictionAcceptedRisk);\r\n    const setUserPredictionAcceptedRisk = useCallback((acceptedRisk) => {\r\n        dispatch(updateUserPredictionAcceptedRisk({ userAcceptedRisk: acceptedRisk }));\r\n    }, [dispatch]);\r\n    return [userPredictionAcceptedRisk, setUserPredictionAcceptedRisk];\r\n}\r\nexport function useUserPredictionChartDisclaimerShow() {\r\n    const dispatch = useDispatch();\r\n    const userPredictionChartDisclaimerShow = useSelector((state) => state.user.userPredictionChartDisclaimerShow);\r\n    const setPredictionUserChartDisclaimerShow = useCallback((showDisclaimer) => {\r\n        dispatch(updateUserPredictionChartDisclaimerShow({ userShowDisclaimer: showDisclaimer }));\r\n    }, [dispatch]);\r\n    return [userPredictionChartDisclaimerShow, setPredictionUserChartDisclaimerShow];\r\n}\r\nexport function useUserExpertModeAcknowledgementShow() {\r\n    const dispatch = useDispatch();\r\n    const userExpertModeAcknowledgementShow = useSelector((state) => state.user.userExpertModeAcknowledgementShow);\r\n    const setUserExpertModeAcknowledgementShow = useCallback((showAcknowledgement) => {\r\n        dispatch(updateUserExpertModeAcknowledgementShow({ userExpertModeAcknowledgementShow: showAcknowledgement }));\r\n    }, [dispatch]);\r\n    return [userExpertModeAcknowledgementShow, setUserExpertModeAcknowledgementShow];\r\n}\r\nexport function useUserUsernameVisibility() {\r\n    const dispatch = useDispatch();\r\n    const userUsernameVisibility = useSelector((state) => state.user.userUsernameVisibility);\r\n    const setUserUsernameVisibility = useCallback((usernameVisibility) => {\r\n        dispatch(updateUserUsernameVisibility({ userUsernameVisibility: usernameVisibility }));\r\n    }, [dispatch]);\r\n    return [userUsernameVisibility, setUserUsernameVisibility];\r\n}\r\nexport function useUserTransactionTTL() {\r\n    const dispatch = useDispatch();\r\n    const userDeadline = useSelector((state) => state.user.userDeadline);\r\n    const setUserDeadline = useCallback((deadline) => {\r\n        dispatch(updateUserDeadline({ userDeadline: deadline }));\r\n    }, [dispatch]);\r\n    return [userDeadline, setUserDeadline];\r\n}\r\nexport function useAddUserToken() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((token) => {\r\n        dispatch(addSerializedToken({ serializedToken: serializeToken(token) }));\r\n    }, [dispatch]);\r\n}\r\nexport function useRemoveUserAddedToken() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((chainId, address) => {\r\n        dispatch(removeSerializedToken({ chainId, address }));\r\n    }, [dispatch]);\r\n}\r\nexport function useGasPrice() {\r\n    const chainId = process.env.REACT_APP_CHAIN_ID;\r\n    const userGas = useSelector((state) => state.user.gasPrice);\r\n    return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet;\r\n}\r\nexport function useGasPriceManager() {\r\n    const dispatch = useDispatch();\r\n    const userGasPrice = useGasPrice();\r\n    const setGasPrice = useCallback((gasPrice) => {\r\n        dispatch(updateGasPrice({ gasPrice }));\r\n    }, [dispatch]);\r\n    return [userGasPrice, setGasPrice];\r\n}\r\nfunction serializePair(pair) {\r\n    return {\r\n        token0: serializeToken(pair.token0),\r\n        token1: serializeToken(pair.token1),\r\n    };\r\n}\r\nexport function usePairAdder() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((pair) => {\r\n        dispatch(addSerializedPair({ serializedPair: serializePair(pair) }));\r\n    }, [dispatch]);\r\n}\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]) {\r\n    return new Token(tokenA.chainId, UDEPair.getAddress(tokenA, tokenB), 18, 'UDE-LP', 'UDEGO LPs');\r\n}\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs() {\r\n    const { chainId } = useActiveWeb3React();\r\n    const tokens = useAllTokens();\r\n    // pinned pairs\r\n    // eslint-disable-next-line no-cond-assign,no-void,no-nested-ternary\r\n    const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n    // pairs for every token against every base\r\n    const generatedPairs = useMemo(() => chainId\r\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\r\n            const token = tokens[tokenAddress];\r\n            // for each token on the current chain,\r\n            return (\r\n            // loop though all bases on the current chain\r\n                // eslint-disable-next-line no-cond-assign,no-void\r\n                (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map((base) => {\r\n                if (base.address === token.address) {\r\n                    return null;\r\n                }\r\n                return [base, token];\r\n            })\r\n                .filter((p) => p !== null));\r\n        })\r\n        : [], [tokens, chainId]);\r\n    // pairs saved by users\r\n    const savedSerializedPairs = useSelector(({ user: { pairs } }) => pairs);\r\n    const userPairs = useMemo(() => {\r\n        if (!chainId || !savedSerializedPairs)\r\n            return [];\r\n        const forChain = savedSerializedPairs[chainId];\r\n        if (!forChain)\r\n            return [];\r\n        return Object.keys(forChain).map((pairId) => [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]);\r\n    }, [savedSerializedPairs, chainId]);\r\n    const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\r\n    return useMemo(() => {\r\n        // dedupes pairs of tokens in the combined list\r\n        const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\r\n            const sorted = tokenA.sortsBefore(tokenB);\r\n            const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\r\n            if (memo[key])\r\n                return memo;\r\n            memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\r\n            return memo;\r\n        }, {});\r\n        return Object.keys(keyed).map((key) => keyed[key]);\r\n    }, [combinedList]);\r\n}\r\nexport const useWatchlistTokens = () => {\r\n    let _a;\r\n    const dispatch = useDispatch();\r\n    // eslint-disable-next-line no-cond-assign,no-void\r\n    const savedTokens = (_a = useSelector((state) => state.user.watchlistTokens)) !== null && _a !== void 0 ? _a : [];\r\n    const updatedSavedTokens = useCallback((address) => {\r\n        dispatch(addWatchlistToken({ address }));\r\n    }, [dispatch]);\r\n    return [savedTokens, updatedSavedTokens];\r\n};\r\nexport const useWatchlistPools = () => {\r\n    let _a;\r\n    const dispatch = useDispatch();\r\n    // eslint-disable-next-line no-cond-assign,no-void\r\n    const savedPools = (_a = useSelector((state) => state.user.watchlistPools)) !== null && _a !== void 0 ? _a : [];\r\n    const updateSavedPools = useCallback((address) => {\r\n        dispatch(addWatchlistPool({ address }));\r\n    }, [dispatch]);\r\n    return [savedPools, updateSavedPools];\r\n};","import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\nimport {ethers} from \"ethers\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n\r\nexport function fBigNumber(number, decimals=18) {\r\n  return ethers.utils.formatUnits(number, decimals)\r\n}\r\n"],"names":["login","useConnect","React","showModal","setShowModal","className","onClick","disable","ConnectorNames","style","cursor","src","alt","viewBox","width","color","xmlns","class","d","fill","type","useCallWithGasPrice","gasPrice","useGasPrice","callWithGasPrice","useCallback","contract","methodName","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","undefined","tx","useFetchPublicPoolsData","dispatch","useAppDispatch","slowRefresh","useRefresh","useEffect","fetchPoolsPublicData","simpleRpcProvider","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsStakingLimitsAsync","useFetchUserPools","account","fastRefresh","fetchPoolsUserDataAsync","getDividerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DividerRoot","styled","name","overridesResolver","props","styles","ownerState","root","absolute","variant","light","orientation","vertical","flexItem","children","withChildren","withChildrenVertical","textAlign","textAlignRight","textAlignLeft","theme","_extends","margin","flexShrink","borderWidth","borderStyle","borderColor","palette","divider","borderBottomWidth","position","bottom","left","alpha","marginLeft","spacing","marginRight","marginTop","marginBottom","height","borderRightWidth","alignSelf","display","whiteSpace","border","borderTop","top","content","transform","flexDirection","borderLeft","DividerWrapper","wrapper","wrapperVertical","paddingLeft","paddingRight","paddingTop","paddingBottom","inProps","ref","useThemeProps","component","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","getApy","apr","compoundFrequency","days","performanceFee","daysAsDecimalOfYear","aprAsDecimal","timesCompounded","apyAsDecimal","performanceFeeAsDecimal","takenAsPerformanceFee","inputRegex","RegExp","InputField","tokenSymbol","isMax","label","placeHolder","inputValue","onInputChange","onMax","selectedToken","tokenBalance","max","onConfirm","onDismiss","useActiveWeb3React","useState","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","isBalanceZero","Card","sx","maxWidth","CardContent","background","borderRadius","balance","stakedBalanceBigNumber","getBalanceAmount","gt","toFixed","e","showError","data","message","displayBalance","Button","size","container","item","xs","md","TextField","inputMode","step","min","fullWidth","value","parseFloat","placeholder","title","onChange","event","nextUserInput","currentTarget","replace","test","escapeRegExp","fontSize","alignItems","CardActions","disabled","isFinite","eq","DEFAULT_GAS_LIMIT","sousId","isUsingBnb","isCompound","useWeb3React","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","amount","decimals","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","isBnbPool","pool","stakingTokenBalance","isDisabled","isUnstake","stakingToken","earningTokenPrice","userData","stakingLimit","earningToken","open","setOpen","input","setInput","useStakePool","useUnstakePool","Dialog","onClose","DialogTitle","symbol","DialogContent","dividers","address","val","handleHarvest","harvestFarm","onReward","hasEarnings","needsApproval","useHarvestPool","onHarvest","onCompound","isCompounding","timeStamp","poolCategory","harvest","PoolCategory","allowance","BIG_ZERO","stakedBalance","earnings","pendingReward","isStaked","toNumber","lpContract","earningTokenSymbol","requestedApproval","setRequestedApproval","handleApprove","ethers","wait","receipt","updateUserAllowance","status","showFulfill","console","error","useApprovePool","useERC20","justifyContent","zIndex","backdropFilter","WebkitBackdropFilter","borderTopLeftRadius","shape","borderRadiusMd","borderTopRightRadius","backgroundColor","primary","darker","objectFit","InfoItem","number","mb","StakeCard","timeStmp","totalStaked","stakingTokenPrice","poolWeight","isAutoVault","autoCompoundFrequency","getAprData","earningsPercentageToDisplay","isCompoundPool","lastInvest","userLast","weight","differ","Date","now","hours","Math","floor","round","fCurrency","getBalanceNumber","toString","toLocaleString","pt","formatUnit","useSelector","state","pools","userDataLoaded","map","transformPool","usePools","poolsWithoutAutoVault","find","usePollFarmsPublicData","ConnectWallet","MTPLProfile","farm","useRef","logout","handleClose","shortAddress","href","EXPLORER","target","rel","useIsExpertMode","user","userExpertMode","useExpertModeManager","useDispatch","expertMode","toggleSetExpertMode","updateUserExpertMode","useUserSingleHopOnly","userSingleHopOnly","newSingleHopOnly","updateUserSingleHopOnly","useUserSlippageTolerance","userSlippageTolerance","slippage","updateUserSlippageTolerance","userGas","process","ChainId","GAS_PRICE_GWEI","toV2LiquidityToken","tokenA","tokenB","Token","chainId","UDEPair","useTrackedTokenPairs","tokens","useAllTokens","pinnedPairs","PINNED_PAIRS","generatedPairs","flatMap","Object","keys","tokenAddress","token","BASES_TO_TRACK_LIQUIDITY_FOR","base","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","deserializeToken","token0","token1","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key","numeral","format","Number","isInteger","fNumber","fBigNumber"],"sourceRoot":""}